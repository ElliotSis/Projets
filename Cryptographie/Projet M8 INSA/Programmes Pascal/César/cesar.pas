program cesar;

uses 
	sysutils;


{$J-}
const
  PROBAREELLESBIG: array['A'..'Z','A'..'Z'] of Real = ((0.00001,0.32,0.42,0.21,0.01,0.09,0.34,0.10,1.07,0.03,0.00001,0.55,0.38,1.01,0.02,0.38,0.11,0.86,0.69,0.51,0.77,0.59,0.00001,0.01,0.13,0.01),(0.32,0.01,0.00001,0.00001,0.25,0.00001,0.00001,0.00001,0.28,0.02,0.00001,0.37,0.00001,0.00001,0.39,0.00001,0.00001,0.30,0.06,0.01,0.09,0.00001,0.00001,0.00001,0.01,0.00001),(0.44,0.00001,0.13,0.00001,0.81,0.00001,0.00001,0.71,0.37,0.00001,0.00001,0.21,0.00001,0.00001,0.81,0.00001,0.04,0.33,0.03,0.23,0.25,0.00001,0.00001,0.00001,0.01,0.00001),(0.58,0.00001,0.00001,0.00001,1.07,0.00001,0.01,0.00001,0.71,0.01,0.00001,0.00001,0.02,0.00001,0.45,0.00001,0.00001,0.30,0.11,0.00001,0.45,0.01,0.00001,0.00001,0.01,0.00001),(0.33,0.07,0.40,0.10,0.01,0.17,0.12,0.05,0.29,0.01,0.00001,0.71,0.70,1.18,0.03,0.27,0.03,0.96,1.09,0.90,0.90,0.32,0.01,0.20,0.01,0.24),(0.46,0.00001,0.00001,0.00001,0.27,0.25,0.00001,0.00001,0.40,0.00001,0.00001,0.14,0.00001,0.00001,0.41,0.00001,0.00001,0.21,0.02,0.00001,0.16,0.00001,0.00001,0.00001,0.00001,0.00001),(0.31,0.00001,0.00001,0.00001,0.47,0.00001,0.06,0.00001,0.14,0.00001,0.00001,0.12,0.01,0.25,0.17,0.00001,0.00001,0.34,0.02,0.06,0.21,0.00001,0.00001,0.00001,0.02,0.00001),(0.50,0.00001,0.00001,0.00001,0.53,0.00001,0.00001,0.00001,0.21,0.00001,0.00001,0.00001,0.00001,0.00001,0.33,0.00001,0.00001,0.02,0.00001,0.00001,0.10,0.00001,0.00001,0.00001,0.04,0.00001),(0.23,0.14,0.30,0.27,0.90,0.13,0.29,0.00001,0.02,0.00001,0.00001,0.91,0.28,0.87,0.40,0.07,0.20,0.70,0.93,1.09,0.01,0.28,0.00001,0.16,0.00001,0.03),(0.12,0.00001,0.00001,0.00001,0.34,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.25,0.00001,0.00001,0.00001,0.00001,0.00001,0.14,0.00001,0.00001,0.00001,0.00001,0.00001),(0.01,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.01,0.00001,0.00001,0.00001,0.00001,0.00001,0.01,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001),(0.93,0.01,0.03,0.03,1.19,0.00001,0.02,0.03,0.49,0.00001,0.00001,0.76,0.02,0.00001,0.46,0.03,0.13,0.00001,0.17,0.09,0.54,0.01,0.00001,0.02,0.03,0.02),(0.79,0.30,0.00001,0.00001,0.90,0.00001,0.00001,0.00001,0.45,0.00001,0.00001,0.00001,0.50,0.02,0.58,0.40,0.00001,0.03,0.01,0.00001,0.13,0.00001,0.00001,0.00001,0.02,0.00001),(0.45,0.00001,0.54,0.73,0.90,0.18,0.36,0.02,0.34,0.01,0.01,0.03,0.00001,0.43,0.47,0.00001,0.11,0.04,0.79,1.08,0.23,0.12,0.00001,0.00001,0.01,0.02),(0.01,0.13,0.20,0.10,0.10,0.07,0.13,0.04,0.80,0.00001,0.01,0.34,0.65,1.11,0.01,0.17,0.03,0.68,0.33,0.26,1.11,0.04,0.00001,0.00001,0.21,0.01),(0.83,0.00001,0.00001,0.00001,0.58,0.00001,0.00001,0.16,0.30,0.00001,0.00001,0.47,0.00001,0.00001,0.69,0.23,0.00001,0.61,0.14,0.11,0.25,0.00001,0.00001,0.00001,0.00001,0.00001),(0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,1.02,0.00001,0.00001,0.00001,0.00001,0.00001),(0.83,0.08,0.26,0.38,1.15,0.03,0.16,0.01,0.76,0.00001,0.00001,0.12,0.26,0.20,0.68,0.08,0.06,0.39,0.53,0.54,0.23,0.12,0.00001,0.00001,0.04,0.00001),(0.69,0.01,0.17,0.00001,0.90,0.01,0.00001,0.01,0.64,0.00001,0.00001,0.01,0.04,0.01,0.69,0.19,0.18,0.00001,0.66,0.66,0.50,0.00001,0.00001,0.00001,0.02,0.00001),(0.71,0.00001,0.01,0.00001,0.95,0.00001,0.00001,0.12,0.70,0.00001,0.00001,0.01,0.00001,0.00001,0.64,0.00001,0.00001,0.81,0.30,0.43,0.32,0.00001,0.00001,0.00001,0.02,0.02),(0.32,0.10,0.22,0.19,0.82,0.11,0.09,0.00001,0.79,0.08,0.00001,0.42,0.15,0.77,0.07,0.25,0.03,0.96,0.79,0.73,0.00001,0.38,0.00001,0.47,0.05,0.02),(0.58,0.00001,0.00001,0.00001,0.68,0.00001,0.00001,0.00001,0.46,0.00001,0.00001,0.00001,0.00001,0.00001,0.59,0.00001,0.00001,0.22,0.00001,0.00001,0.06,0.00001,0.00001,0.00001,0.00001,0.00001),(0.01,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001),(0.04,0.00001,0.03,0.00001,0.04,0.00001,0.00001,0.00001,0.05,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.07,0.00001,0.00001,0.00001,0.04,0.00001,0.00001,0.00001,0.01,0.00001,0.00001),(0.15,0.00001,0.00001,0.01,0.15,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.01,0.02,0.01,0.04,0.03,0.00001,0.02,0.09,0.02,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001),(0.03,0.00001,0.00001,0.00001,0.04,0.00001,0.00001,0.00001,0.01,0.00001,0.00001,0.00001,0.00001,0.00001,0.01,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001,0.00001));
{$J+}

type
	Bigrammes = array['A'..'Z','A'..'Z'] of LongWord;

function compterBigrammes(texte : Ansistring) : Bigrammes;
	var l, m : Char;
		i : LongWord;
		res : Bigrammes;
begin
	for l := 'A' to 'Z' do
	begin
		for m := 'A' to 'Z' do
			res[l,m] := 0;
	end;
	for i := 2 to length(texte) do
		res[texte[i-1],texte[i]] := res[texte[i-1],texte[i]] + 1;
	compterBigrammes := res;
end;

function calculerFormeBigrammes(texte : Ansistring): Real;
	var	l, m : Char;
		forme : Real;
		effectifs : Bigrammes;
begin
	forme := 0;
	effectifs := compterBigrammes(texte);
	for l := 'A' to 'Z' do
	begin
		for m := 'A' to 'Z' do
			forme := forme + effectifs[l,m]*ln(PROBAREELLESBIG[l,m]/100);
	end;
	calculerFormeBigrammes:= forme
end;

function importer(chemin : Ansistring) : Ansistring;
	var fichier : Text;
		res : Ansistring;
begin
	assign(fichier, chemin);
	reset(fichier);
	readln(fichier, res);
	close(fichier);
	importer := res
end;

function dechiffrerCaractere(c : Char; cle : Integer) : Char;	
	var res : Char;
		i : Integer;
begin
	res := c;
	for i := 1 to cle do
	begin
		case res of
			'A' : res := 'Z';
			else 
				res := pred(res);
		end;
	end;
	dechiffrerCaractere := res
end;

function dechiffrerTexte(texte : Ansistring; cle : Integer) : Ansistring;
	var res : Ansistring;
		i : Integer;
begin
	res := '';
	for i := 1 to Length(texte) do
		res := res + dechiffrerCaractere(texte[i], cle);
	dechiffrerTexte := res
end;

procedure exporter(chemin : Ansistring; texte : Ansistring);
	var fichier : Text;
begin
	assign(fichier, chemin);
	rewrite(fichier);
	write(fichier, texte);
	close(fichier)
end;

	var texte, txt: Ansistring;
		i : Integer;
		forme : Real;
begin
	texte := importer('cryptogramme.txt');
	for i := 1 to 25 do
	begin
		txt := dechiffrerTexte(texte,i);
		forme := calculerFormeBigrammes(txt);
		exporter('res' + IntToStr(i) + '.txt', dechiffrerTexte(txt, i) + #13#10 + FloatToStr(forme));
	end;
end.
